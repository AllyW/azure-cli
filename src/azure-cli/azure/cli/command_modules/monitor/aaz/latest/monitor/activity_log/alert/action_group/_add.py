# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor activity-log alert action-group add",
)
class Add(AAZCommand):
    """Add action groups to this activity log alert rule. It can also be used to overwrite existing webhook properties of particular action groups.

    :example: Add an action group and specify webhook properties.
        az monitor activity-log alert action-group add -n {AlertName} -g {ResourceGroup} \ --action /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/microsoft.insight s/actionGroups/{ActionGroup} \ --webhook-properties usage=test owner=jane

    :example: Overwite an existing action group's webhook properties.
        az monitor activity-log alert action-group add -n {AlertName} -g {ResourceGroup} \ -a /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/microsoft.insights/acti onGroups/{ActionGroup} \ --webhook-properties usage=test owner=john

    :example: Remove webhook properties from an existing action group.
        az monitor activity-log alert action-group add -n {AlertName} -g {ResourceGroup} \ -a /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/microsoft.insights/acti onGroups/{ActionGroup}

    :example: Add new action groups but prevent the command from accidently overwrite existing webhook properties
        az monitor activity-log alert action-group add -n {AlertName} -g {ResourceGroup} --strict \ --action-group {ResourceIDList}
    """

    _aaz_info = {
        "version": "2017-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}", "2017-04-01", "properties.actions.actionGroups[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.activity_log_alert_name = AAZStrArg(
            options=["-n", "--name", "--activity-log-alert-name"],
            help="The name of the activity log alert.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.action_group_index = AAZIntArg(
            options=["--action-group-index"],
        )

        # define Arg Group "ActivityLogAlert.properties.actions.actionGroups[]"

        _args_schema = cls._args_schema
        _args_schema.action_group_id = AAZStrArg(
            options=["--action-group-id"],
            arg_group="ActivityLogAlert.properties.actions.actionGroups[]",
            help="The resourceId of the action group. This cannot be null or empty.",
            required=True,
        )
        _args_schema.webhook_properties = AAZDictArg(
            options=["--webhook-properties"],
            arg_group="ActivityLogAlert.properties.actions.actionGroups[]",
            help="the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.",
        )

        webhook_properties = cls._args_schema.webhook_properties
        webhook_properties.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ActivityLogAlertsGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        self.ActivityLogAlertsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.actions.actionGroups
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.action_group_index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.actions.actionGroups
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.action_group_index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.action_group_index = idx
            result[idx] = value
            return

    class ActivityLogAlertsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "activityLogAlertName", self.ctx.args.activity_log_alert_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AddHelper._build_schema_activity_log_alert_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class ActivityLogAlertsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "activityLogAlertName", self.ctx.args.activity_log_alert_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _AddHelper._build_schema_activity_log_alert_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("actionGroupId", AAZStrType, ".action_group_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("webhookProperties", AAZDictType, ".webhook_properties")

            webhook_properties = _builder.get(".webhookProperties")
            if webhook_properties is not None:
                webhook_properties.set_elements(AAZStrType, ".")

            return _instance_value


class _AddHelper:
    """Helper class for Add"""

    _schema_activity_log_alert_resource_read = None

    @classmethod
    def _build_schema_activity_log_alert_resource_read(cls, _schema):
        if cls._schema_activity_log_alert_resource_read is not None:
            _schema.id = cls._schema_activity_log_alert_resource_read.id
            _schema.location = cls._schema_activity_log_alert_resource_read.location
            _schema.name = cls._schema_activity_log_alert_resource_read.name
            _schema.properties = cls._schema_activity_log_alert_resource_read.properties
            _schema.tags = cls._schema_activity_log_alert_resource_read.tags
            _schema.type = cls._schema_activity_log_alert_resource_read.type
            return

        cls._schema_activity_log_alert_resource_read = _schema_activity_log_alert_resource_read = AAZObjectType()

        activity_log_alert_resource_read = _schema_activity_log_alert_resource_read
        activity_log_alert_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        activity_log_alert_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        activity_log_alert_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        activity_log_alert_resource_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        activity_log_alert_resource_read.tags = AAZDictType()
        activity_log_alert_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_activity_log_alert_resource_read.properties
        properties.actions = AAZObjectType(
            flags={"required": True},
        )
        properties.condition = AAZObjectType(
            flags={"required": True},
        )
        properties.description = AAZStrType()
        properties.enabled = AAZBoolType()
        properties.scopes = AAZListType(
            flags={"required": True},
        )

        actions = _schema_activity_log_alert_resource_read.properties.actions
        actions.action_groups = AAZListType(
            serialized_name="actionGroups",
        )

        action_groups = _schema_activity_log_alert_resource_read.properties.actions.action_groups
        action_groups.Element = AAZObjectType()

        _element = _schema_activity_log_alert_resource_read.properties.actions.action_groups.Element
        _element.action_group_id = AAZStrType(
            serialized_name="actionGroupId",
            flags={"required": True},
        )
        _element.webhook_properties = AAZDictType(
            serialized_name="webhookProperties",
        )

        webhook_properties = _schema_activity_log_alert_resource_read.properties.actions.action_groups.Element.webhook_properties
        webhook_properties.Element = AAZStrType()

        condition = _schema_activity_log_alert_resource_read.properties.condition
        condition.all_of = AAZListType(
            serialized_name="allOf",
            flags={"required": True},
        )

        all_of = _schema_activity_log_alert_resource_read.properties.condition.all_of
        all_of.Element = AAZObjectType()

        _element = _schema_activity_log_alert_resource_read.properties.condition.all_of.Element
        _element.equals = AAZStrType(
            flags={"required": True},
        )
        _element.field = AAZStrType(
            flags={"required": True},
        )

        scopes = _schema_activity_log_alert_resource_read.properties.scopes
        scopes.Element = AAZStrType()

        tags = _schema_activity_log_alert_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_activity_log_alert_resource_read.id
        _schema.location = cls._schema_activity_log_alert_resource_read.location
        _schema.name = cls._schema_activity_log_alert_resource_read.name
        _schema.properties = cls._schema_activity_log_alert_resource_read.properties
        _schema.tags = cls._schema_activity_log_alert_resource_read.tags
        _schema.type = cls._schema_activity_log_alert_resource_read.type


__all__ = ["Add"]
